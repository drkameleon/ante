type List 't =
    first: Maybe (ref Node 't)
    last:  Maybe (ref Node 't)

type Node 't =
    elem: 't
    next: Maybe (ref Node 't)

module Node
    of elem = Node elem None

module List
    of elem =
        n = new Node.of elem
        List (Some n) (Some n)


append (l:mut List 't) (elem:'t) =
    n = new Node elem

    match l.last with
    | Some last ->
        last.next := Some n
        l.last := Some n
    | None ->
        l.first := Some n
        l.last := Some n


impl Print (List 't)
    printne l =
        match l.first with
        | Some n -> printne "[ "; printne n
        | None -> printne "[ ]"


impl Print (Node 't)
    printne n =
        printne n.elem
        match n.next with
        | Some rest -> printne ", "; printne rest
        | None -> printne " ]"


(++) (l:i32) (r:i32) -> List i32 =
    mut list = List.of l
    append list r
    list

(++) (l:mut List i32) (r:i32) -> List i32 =
    append l r
    l


mut head = List 0

append head 1
append head 2
append head 3

print head

//Same as above, but using ++
l = 0 ++ 1 ++ 2 ++ 3
print l
