import Vec

reverse (s:Str) -> Str =
    buf = mut malloc (s.len + 1usz)

    i = mut 0usz
    while i < s.len do
        buf#i := s.cStr#(s.len - i - 1usz)
        i += 1usz

    buf#i := '\0'
    Str buf i


split (s:Str) (c:c8) -> Vec Str =
    v = mut Vec.empty ()

    i = mut 0
    j = mut 0
    while i < s.len do
        if s.cStr#i == c then
            v.push <| substr s j i
            j := i + 1

        i += 1

    v.push <| substr s j i
    v


substr (s:Str) (begin:usz) (end:usz) -> Str =
    if end > s.len or begin >= s.len then
        return ""

    len = end - begin
    buf = mut malloc (len + 1)
    buf#end := '\0'

    i = mut 0
    b = mut begin
    while b < end do
        buf#i := s#b
        b += 1
        i += 1

    Str buf (len as usz)
